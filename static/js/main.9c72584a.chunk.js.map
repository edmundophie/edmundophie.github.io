{"version":3,"sources":["api.tsx","CurrencyBoard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","getRate","axios","get","then","resp","data","CurrencyBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rateAmount","lastUpdateDateTime","$this","setState","rate","lastUpdatedDate","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","hour","getHours","min","getMinutes","z","n","offset","getTimezoneOffset","Math","abs","react_default","a","createElement","id","getFormattedDateTime","href","React","Component","App","src_CurrencyBoard_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTASe,IAAAA,EAAA,CACbC,QARF,WACE,OAAOC,IAAMC,IAAI,8FAChBC,KAAK,SAAAC,GACJ,OAAOA,EAAKC,SCgEDC,cAhEb,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,KACZC,mBAAoB,MAJET,mFASxB,IAAIU,EAAQP,KACZZ,EAAIC,UAAUG,KAAK,SAASE,GAC1Ba,EAAMC,SAAS,CACbH,WAAYX,EAAKe,KACjBH,mBAAoBZ,EAAKgB,mEAa7B,GAAkC,MAA/BV,KAAKI,MAAME,mBACZ,MAAO,UAWT,IAAIK,EAAM,IAAIC,KAAmC,IAA9BZ,KAAKI,MAAME,oBAE1BO,EAAMF,EAAKG,UACXC,EAAaJ,EAAKK,WAClBC,EAAON,EAAKO,cACZC,EAAMR,EAAKS,WACXC,EAAMV,EAAKW,aAEf,OAAOT,EAAM,IA3BM,CACf,MAAO,MAAO,MACd,MAAO,MAAO,MAAO,MACrB,MAAO,MAAO,MACd,MAAO,OAuBmBE,GAAc,IAAME,EAAO,IAAME,EAAO,IAAME,EAAM,IAhBlF,WACE,SAASE,EAAEC,GAAU,OAAQA,EAAE,GAAI,IAAM,IAAMA,EAC/C,IAAIC,GAAS,IAAIb,MAAOc,oBAGxB,MAAO,OAFID,EAAS,EAAG,IAAM,KAEPF,GADtBE,EAASE,KAAKC,IAAIH,IACa,GAAK,GAAKF,EAAEE,EAAO,IAWoCC,oCAIxF,OACEG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACNH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAR,WAA0BH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,cAAX,OAA6BhC,KAAKI,MAAMC,aAClEwB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,6BAAqB/B,KAAKiC,2BAExCJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,mBAAR,uBA3DVC,IAAMC,WCOnBC,EAPO,WAEpB,OACER,EAAAC,EAAAC,cAACO,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.9c72584a.chunk.js","sourcesContent":["import axios from 'axios';\n\nfunction getRate():any {\n  return axios.get('https://ss6cx1v57i.execute-api.ap-southeast-1.amazonaws.com/release/currency-rate-function')\n  .then(resp => {\n    return resp.data;\n  });\n}\n\nexport default {\n  getRate: getRate\n}","import React from 'react';\nimport './CurrencyBoard.css';\nimport api from './api'\n\nclass CurrencyBoard extends React.Component<{}, {rateAmount: number | null, lastUpdateDateTime: number | null}> {\n  constructor(props:number) {\n    super(props);\n    this.state = {\n      rateAmount: null,\n      lastUpdateDateTime: null\n    }\n  }\n\n  componentDidMount() {\n    var $this = this;\n    api.getRate().then(function(data: { rate: number, lastUpdatedDate: number}) {\n      $this.setState({\n        rateAmount: data.rate,\n        lastUpdateDateTime: data.lastUpdatedDate\n      })\n    });\n  }\n\n  getFormattedDateTime() {\n      var monthNames = [\n        \"Jan\", \"Feb\", \"Mar\",\n        \"Apr\", \"May\", \"Jun\", \"Jul\",\n        \"Aug\", \"Sep\", \"Oct\",\n        \"Nov\", \"Dec\"\n      ];\n\n    if(this.state.lastUpdateDateTime==null) {\n      return \"unknown\";\n    }\n    \n    function getTimezoneOffset() {\n      function z(n:number){return (n<10? '0' : '') + n}\n      var offset = new Date().getTimezoneOffset();\n      var sign = offset < 0? '+' : '-';\n      offset = Math.abs(offset);\n      return 'GMT' + sign + z(offset/60 | 0) + z(offset%60);\n    }\n    \n    var date =new Date(this.state.lastUpdateDateTime*1000);\n    \n    var day = date.getDate();\n    var monthIndex = date.getMonth();\n    var year = date.getFullYear();\n    var hour =date.getHours();\n    var min = date.getMinutes();\n  \n    return day + ' ' + monthNames[monthIndex] + ' ' + year + ' ' + hour + ':' + min + ' ' + getTimezoneOffset();\n  }\n\n  render() {\n    return (\n      <div id=\"board\">\n        <div id=\"inner\">\n          <h3>Currency Rate</h3>\n          <div id=\"rateBox\">USD 1 = <strong id=\"rateAmount\">IDR {this.state.rateAmount}</strong></div>\n          <br/>\n          <div><small><em>Last updated on {this.getFormattedDateTime()}</em></small></div>\n        </div>\n        <div><small><em>Maintained by <a href=\"http://ophie.io\">ophie.io</a></em></small></div>\n      </div>\n    );\n  }\n}\n\nexport default CurrencyBoard;\n","import React from 'react';\nimport './App.css';\nimport CurrencyBoard from './CurrencyBoard';\n\nconst App: React.FC = () => {\n\n  return (\n    <CurrencyBoard></CurrencyBoard>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}